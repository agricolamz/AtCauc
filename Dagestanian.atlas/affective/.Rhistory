lat=dag$latitude,
popup=dag$language,
stroke = F,
radius = 9.5,
fillOpacity = 1,
color = palforfeature(dag$affective),
group = dag$affective) %>%
addCircleMarkers(lng=dag$longitude,
lat=dag$latitude,
popup=dag$language,
radius = 3.5,
stroke = F,
fillOpacity = 1,
color = palforcircles(dag$affective)) %>%
addCircleMarkers(lng=dag$longitude,
lat=dag$latitude,
popup=dag$language,
stroke = F,
radius = 2.5,
fillOpacity = 0.8,
color = dag$colour,
group = dag$language) %>%
addLegend(title = "",
position = c("bottomright"),
values = dag$language,
opacity = 0.9)
dagplot <- leaflet(dag) %>%
addTiles() %>%
addCircleMarkers(lng=dag$longitude,
lat=dag$latitude,
popup=dag$language,
radius = 11,
stroke = F,
fillOpacity = 1,
color = "black") %>%
addCircleMarkers(lng=dag$longitude,
lat=dag$latitude,
popup=dag$language,
stroke = F,
radius = 9.5,
fillOpacity = 1,
color = palforfeature(dag$affective),
group = dag$affective) %>%
addCircleMarkers(lng=dag$longitude,
lat=dag$latitude,
popup=dag$language,
radius = 3.5,
stroke = F,
fillOpacity = 1,
color = palforcircles(dag$affective)) %>%
addCircleMarkers(lng=dag$longitude,
lat=dag$latitude,
popup=dag$language,
stroke = F,
radius = 2.5,
fillOpacity = 0.8,
color = dag$colour,
group = dag$language) %>%
addLegend(title = "",
position = c("bottomright"),
colors = dag$colour,
values = dag$language,
opacity = 0.9)
dagplot <- leaflet(dag) %>%
addTiles() %>%
addCircleMarkers(lng=dag$longitude,
lat=dag$latitude,
popup=dag$language,
radius = 11,
stroke = F,
fillOpacity = 1,
color = "black") %>%
addCircleMarkers(lng=dag$longitude,
lat=dag$latitude,
popup=dag$language,
stroke = F,
radius = 9.5,
fillOpacity = 1,
color = palforfeature(dag$affective),
group = dag$affective) %>%
addCircleMarkers(lng=dag$longitude,
lat=dag$latitude,
popup=dag$language,
radius = 3.5,
stroke = F,
fillOpacity = 1,
color = palforcircles(dag$affective)) %>%
addCircleMarkers(lng=dag$longitude,
lat=dag$latitude,
popup=dag$language,
stroke = F,
radius = 2.5,
fillOpacity = 0.8,
color = dag$colour,
group = dag$language) %>%
addLegend(title = "",
position = c("bottomright"),
colors = dag$colour,
labels = dag$language,
opacity = 0.9)
library(leaflet)
setwd("/home/agricolamz/_DATA/OneDrive1/_Work/Atlas.of.Caucasian.Languages/Dagestanian.atlas/affective")
dag <- read.csv("dag_affective.csv")
write.csv(dag, "dag_affective.csv", row.names = F)
palforfeature <- colorFactor(c("black", "white"), domain = dag$affective)
palforcircles <- colorFactor(c("white", "black"), domain = dag$affective)
dagplot <- leaflet(dag) %>%
addTiles() %>%
addCircleMarkers(lng=dag$longitude,
lat=dag$latitude,
popup=dag$language,
radius = 11,
stroke = F,
fillOpacity = 1,
color = "black") %>%
addCircleMarkers(lng=dag$longitude,
lat=dag$latitude,
popup=dag$language,
stroke = F,
radius = 9.5,
fillOpacity = 1,
color = palforfeature(dag$affective),
group = dag$affective) %>%
addCircleMarkers(lng=dag$longitude,
lat=dag$latitude,
popup=dag$language,
radius = 3.5,
stroke = F,
fillOpacity = 1,
color = palforcircles(dag$affective)) %>%
addCircleMarkers(lng=dag$longitude,
lat=dag$latitude,
popup=dag$language,
stroke = F,
radius = 2.5,
fillOpacity = 0.8,
color = dag$colour,
group = dag$language) %>%
addLegend(title = "",
position = c("bottomleft"),
pal = palforfeature,
values = dag$affective,
opacity = 0.9)%>%
addLegend(title = "",
position = c("bottomright"),
colors = dag$colour,
labels = dag$language,
opacity = 0.9)
dagplot
library(leaflet)
setwd("/home/agricolamz/_DATA/OneDrive1/_Work/Atlas.of.Caucasian.Languages/Dagestanian.atlas/affective")
dag <- read.csv("dag_affective.csv")
write.csv(dag, "dag_affective.csv", row.names = F)
palforfeature <- colorFactor(c("black", "white"), domain = dag$affective)
palforcircles <- colorFactor(c("white", "black"), domain = dag$affective)
dagplot <- leaflet(dag) %>%
addTiles() %>%
addCircleMarkers(lng=dag$longitude,
lat=dag$latitude,
popup=dag$language,
radius = 11,
stroke = F,
fillOpacity = 1,
color = "black") %>%
addCircleMarkers(lng=dag$longitude,
lat=dag$latitude,
popup=dag$language,
stroke = F,
radius = 9.5,
fillOpacity = 1,
color = palforfeature(dag$affective),
group = dag$affective) %>%
addCircleMarkers(lng=dag$longitude,
lat=dag$latitude,
popup=dag$language,
radius = 3.5,
stroke = F,
fillOpacity = 1,
color = palforcircles(dag$affective)) %>%
addCircleMarkers(lng=dag$longitude,
lat=dag$latitude,
popup=dag$language,
stroke = F,
radius = 2.5,
fillOpacity = 0.8,
color = dag$colour,
group = dag$language) %>%
addLegend(title = "",
position = c("bottomleft"),
pal = palforfeature,
values = dag$affective,
opacity = 0.9)%>%
addLegend(title = "",
position = c("bottomright"),
colors = unique(dag$colour),
labels = unique(dag$language),
opacity = 0.9)
dagplot
unique(dag$colour)
unique(dag$language)
unique(dag$colour)
colors(unique(dag$colour))
View(dag)
dag <- read.csv("dag_affective.csv")
palforfeature <- colorFactor(c("black", "white"), domain = dag$affective)
palforcircles <- colorFactor(c("white", "black"), domain = dag$affective)
dagplot <- leaflet(dag) %>%
addTiles() %>%
addCircleMarkers(lng=dag$longitude,
lat=dag$latitude,
popup=dag$language,
radius = 11,
stroke = F,
fillOpacity = 1,
color = "black") %>%
addCircleMarkers(lng=dag$longitude,
lat=dag$latitude,
popup=dag$language,
stroke = F,
radius = 9.5,
fillOpacity = 1,
color = palforfeature(dag$affective),
group = dag$affective) %>%
addCircleMarkers(lng=dag$longitude,
lat=dag$latitude,
popup=dag$language,
radius = 3.5,
stroke = F,
fillOpacity = 1,
color = palforcircles(dag$affective)) %>%
addCircleMarkers(lng=dag$longitude,
lat=dag$latitude,
popup=dag$language,
stroke = F,
radius = 2.5,
fillOpacity = 0.8,
color = dag$colour,
group = dag$language) %>%
addLegend(title = "",
position = c("bottomleft"),
pal = palforfeature,
values = dag$affective,
opacity = 0.9)%>%
addLegend(title = "",
position = c("bottomright"),
colors = unique(dag$colour),
labels = unique(dag$language),
opacity = 0.9)
dagplot
shinyjs:::colourPickerAddin()
library(leaflet)
setwd("/home/agricolamz/_DATA/OneDrive1/_Work/Atlas.of.Caucasian.Languages/Dagestanian.atlas/affective")
dag <- read.csv("dag_affective.csv")
palforfeature <- colorFactor(c("black", "white"), domain = dag$affective)
palforcircles <- colorFactor(c("white", "black"), domain = dag$affective)
dagplot <- leaflet(dag) %>%
addTiles() %>%
addCircleMarkers(lng=dag$longitude,
lat=dag$latitude,
popup=dag$language,
radius = 11,
stroke = F,
fillOpacity = 1,
color = "black") %>%
addCircleMarkers(lng=dag$longitude,
lat=dag$latitude,
popup=dag$language,
stroke = F,
radius = 9.5,
fillOpacity = 1,
color = palforfeature(dag$affective),
group = dag$affective) %>%
addCircleMarkers(lng=dag$longitude,
lat=dag$latitude,
popup=dag$language,
radius = 3.5,
stroke = F,
fillOpacity = 1,
color = palforcircles(dag$affective)) %>%
addCircleMarkers(lng=dag$longitude,
lat=dag$latitude,
popup=dag$language,
stroke = F,
radius = 2.5,
fillOpacity = 0.8,
color = dag$colour,
group = dag$language) %>%
addLegend(title = "",
position = c("bottomleft"),
pal = palforfeature,
values = dag$affective,
opacity = 0.9)%>%
addLegend(title = "",
position = c("bottomright"),
colors = unique(dag$colour),
labels = unique(dag$language),
opacity = 0.9)
dagplot
library(leaflet)
setwd("/home/agricolamz/_DATA/OneDrive1/_Work/Atlas.of.Caucasian.Languages/Dagestanian.atlas/affective")
dag <- read.csv("dag_affective.csv")
palforfeature <- colorFactor(c("black", "white"), domain = dag$affective)
palforcircles <- colorFactor(c("white", "black"), domain = dag$affective)
dagplot <- leaflet(dag) %>%
addTiles() %>%
addCircleMarkers(lng=dag$longitude,
lat=dag$latitude,
popup=dag$language,
radius = 11,
stroke = F,
fillOpacity = 1,
color = "black") %>%
addCircleMarkers(lng=dag$longitude,
lat=dag$latitude,
popup=dag$language,
stroke = F,
radius = 9.5,
fillOpacity = 1,
color = palforfeature(dag$affective),
group = dag$affective) %>%
addCircleMarkers(lng=dag$longitude,
lat=dag$latitude,
popup=dag$language,
radius = 3.5,
stroke = F,
fillOpacity = 1,
color = palforcircles(dag$affective)) %>%
addCircleMarkers(lng=dag$longitude,
lat=dag$latitude,
popup=dag$language,
stroke = F,
radius = 2.5,
fillOpacity = 0.8,
color = dag$colour,
group = dag$language) %>%
addLegend(title = "",
position = c("bottomleft"),
pal = palforfeature,
values = dag$affective,
opacity = 0.9)%>%
addLegend(title = "",
position = c("bottomright"),
colors = unique(dag$colour),
labels = unique(dag$language),
opacity = 0.9)
dagplot
df <- read.csv("http://goo.gl/5LZdDA")
str(df)
View(df)
library(PerformanceAnalytics)
chart.Correlation(df)
View(df)
chart.Correlation(df[,-c(1, 13)])
df[,-c(1, 13)]
df[,-c(1, 14)]
df[,-c(1, 12)]
df[,-c(1, 11)]
df[-c(1, 11),]
df[-c(1, 11),]
df[,-c(1, 11)]
df[,-c(1:13)]
df[,-c(1:12)]
df[,-c(1:11)]
df[,-c(1, 9)]
chart.Correlation(df[-c(1, 9),])
df[-c(1, 9),]
chart.Correlation(df[,-c(1, 9)])
df[,-c(1, 9)]
df <- read.csv("http://goo.gl/5LZdDA")
df <- read.csv("http://goo.gl/5LZdDA")
library(PerformanceAnalytics)
chart.Correlation(df[,-c(1, 9)])
df
df <- read.csv("http://goo.gl/5LZdDA")
df
df <- read.csv("http://goo.gl/Zjr9aF")
View(df)
chart.Correlation(df[,-c(1, 9)])
m1 <- lm(perceived.as.homo.percent~.)
m1 <- lm(perceived.as.homo.percent~., data = df)
summary(m1)
m1 <- lm(perceived.as.homo.percent~s.duration.ms+
vowel.duration.ms+
average.f0.Hz+
f0.range.Hz+
age, data = df)
summary(m1)
m1 <- lm(perceived.as.homo.percent~s.duration.ms+
vowel.duration.ms+
average.f0.Hz+
f0.range.Hz+
age, data = df)
summary(m1)
m1 <- lm(perceived.as.homo.percent~s.duration.ms+
vowel.duration.ms+
average.f0.Hz+
f0.range.Hz+
age, data = df)
summary(m1)
step(perceived.as.homo.percent~s.duration.ms+
vowel.duration.ms+
average.f0.Hz+
f0.range.Hz+
age, data = df)
step(perceived.as.homo.percent~s.duration.ms+
vowel.duration.ms+
average.f0.Hz+
f0.range.Hz+
age, data = df, method = "both")
age, data = df, method = "both"))
step(lm(perceived.as.homo.percent~s.duration.ms+
vowel.duration.ms+
average.f0.Hz+
f0.range.Hz+
age, data = df, method = "both"))
step(m1)
step(m1, method = "both")
a <- step(m1, method = "both")
step(m1, method = "both")
step(m1, method = "both")
step(m1, method = "both")
a <- step(m1, method = "both")
a <- step(m1, method = "both")
a
a$model
a$call
a$call
mbest <- lm(formula = perceived.as.homo.percent ~ s.duration.ms + vowel.duration.ms +
age, data = df)
summary(mbest)
library(ggplot2)
ggplot(df, aes(x=df$perceived.as.homo.percent, y = df$orientation))+
geom_boxplot()
ggplot(df, aes(y=df$perceived.as.homo.percent, x = df$orientation))+
geom_boxplot()
ggplot(df, aes(y=df$perceived.as.homo.percent, x = df$orientation))+
geom_boxplot()+
xlab("ориентация говорящего")+
ylab("ориентация по восприятию слушающего")
ggplot(df, aes(y=df$perceived.as.homo.percent, x = df$orientation))+
geom_boxplot()+
xlab("ориентация говорящего")+
ylab("ориентация по восприятию слушающего")+
theme_bw()
df$perceived.as.homo.percent~df$orientation
table(df$perceived.as.homo.percent~df$orientation)
table(df$perceived.as.homo.percent,df$orientation)
sapply(df$perceived.as.homo.percent, mean)
apply(df$perceived.as.homo.percent, mean)
aggregate(df$perceived.as.homo.percent,
by=list(df$orientation), FUN=mean)
aggregate(df$perceived.as.homo.percent,
by=list(df$orientation),
FUN=mean)
aggregate(df$perceived.as.homo.percent,
by=df$orientation,
FUN=mean)
aggregate(df$perceived.as.homo.percent,
by=list(df$orientation),
FUN=medean)
aggregate(df$perceived.as.homo.percent,
by=list(df$orientation),
FUN=median)
ggplot(df, aes(y=df$perceived.as.homo.percent, x = df$orientation))+
geom_boxplot()+
geom_jitter()+
xlab("ориентация говорящего")+
ylab("ориентация по восприятию слушающего")+
theme_bw()
View(df)
aggregate(df$perceived.as.homo,
by=list(df$orientation),
FUN=sum)
aggregate(df$perceived.as.homo~df$orientation,
FUN=summary)
aggregate(.~df$perceived.as.homo+df$orientation,
FUN=sum)
aggregate(.~df$perceived.as.homo+df$orientation,
FUN=summary)
aggregate(df$perceived.as.homo,
by=list(df$orientation),
FUN=sum)
aggregate(df$perceived.as.hetero,
by=list(df$orientation),
FUN=sum)
186+75+89
binom.test(186, 350, 0.5)
summary(m1)
AIC(m1)
m1 <- lm(perceived.as.homo.percent~s.duration.ms+
vowel.duration.ms+
average.f0.Hz+
f0.range.Hz+
age, data = df)
summary(m1)
AIC(m1)
a <- step(m1, method = "both")
mbest <- lm(formula = perceived.as.homo.percent ~ s.duration.ms + vowel.duration.ms +
age, data = df)
summary(mbest)
AIC(mbest)
AIC(m1)
a <- step(m1, method = "both")
a
m1 <- lm(perceived.as.homo.percent~s.duration.ms+
vowel.duration.ms+
average.f0.Hz+
f0.range.Hz+
age, data = df)
mbest <- lm(formula = perceived.as.homo.percent ~ s.duration.ms + vowel.duration.ms +
age, data = df)
AIC(m1, mbest)
