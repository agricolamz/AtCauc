ggplot(data, aes(x = probability))+
geom_bar()+
facet_grid(~type)
ggplot(data, aes(x = probability))+
geom_histogram()+
facet_grid(~type)
ggplot(data, aes(y = probability))+
geom_histogram()+
facet_grid(~type)
ggplot(data, aes(x = p, y = probability))+
geom_point()+
facet_grid(~type)
ggplot(data, aes(x = p, y = probability, color = type))+
geom_point()
chisq.test(50, 60)
(30-10)^2/sqrt(30)+(30-50)^2/sqrt(30)
((30-10)/sqrt(30))^2+((30-50)/sqrt(30))^2
chisq.test(c(50, 60))
a <- chisq.test(c(50, 60))
a$expected
a <- chisq.test(c(50, 10))
a$expected
a <- chisq.test(c(50, 10))
a
a$expected
a <- chisq.test(c(50, 10), p = c(0.2, 0.8))
a$expected
install.packages("ape")
detach("package:methods", unload=TRUE)
library("rmarkdown", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
devtools::install_github("rstudio/rmarkdown")
print("hello")
df$p
df <- data.frame(a = letters(1:8),
b = letters(2:9),
c = letters(3:10))
df <- data.frame(a = letter(1:8),
b = letter(2:9),
c = letter(3:10))
df <- data.frame(a = letters(1:8),
b = letters(2:9),
c = letters(3:10))
df <- data.frame(a = letters[1:8],
b = letters[2:9],
c = letters[3:10])
df
union(df)
union(df$a, df$b)
intersect(df$a, df$b)
df <- data.frame(a = letters[1:5],
b = letters[3:7],
c = letters[4:8])
intersect(df$a, df$b)
df <- data.frame(a = letters[1:5],
b = letters[3:7],
c = letters[4:8])
df
intersect(df$a, df$b)
intersect(df$a, df$b, df$c)
intersect(df$a, df$b)
setdiff(df$a, df$b)
setdiff(df$b, df$a)
df <- data.frame(a = letters[1:5],
b = letters[3:7],
c = letters[4:8])
df
intersect(df$a, df$b)
setdiff(df$a, df$b)
setdiff(df$b, df$a)
intersect(df$first, df$second)
setdiff(df$first, df$second)
setdiff(df$second, df$first)
df <- data.frame(first = letters[1:5],
second = letters[3:7],
third = letters[4:8])
df
intersect(df$first, df$second)
setdiff(df$first, df$second)
setdiff(df$second, df$first)
install.packages("RWeka")
install.packages("RWeka")
all.vowel <- read.table("http://hsequantling.wikispaces.com/file/view/nanai-vowels.csv/564569635/nanai-vowels.csv", sep = ";", header = T)
str(all.vowel)
str(all.vowel)
View(all.vowel)
pairs(all.vowel, pch = ".")
vowel.i <- all.vowel[all.vowel$sound == "i",]
vowel.I <- all.vowel[all.vowel$sound == "I",]
vowel.e <- all.vowel[all.vowel$sound == "e",]
pairs(vowel.i[-c(1, 3, 4)], pch = ".")
pairs(vowel.I[-c(1, 3, 4)], pch = ".")
pairs(vowel.e[-c(1, 3, 4)], pch = ".")
pairs(vowel.i[-c(1, 3, 4)], pch = ".")
pairs(vowel.I[-c(1, 3, 4)], pch = ".")
pairs(vowel.e[-c(1, 3, 4)], pch = ".")
pairs(vowel.e[-c(1, 3, 4)], pch = ".")
pairs(vowel.I[-c(1, 3, 4)], pch = ".")
pairs(vowel.i[-c(1, 3, 4)], pch = ".")
pairs(vowel.e[-c(1, 3, 4)], pch = ".")
set.seed(seed = 3)
vowel.i <- vowel.i[sample(nrow(vowel.i), nrow(vowel.i)), ]
vowel.I <- vowel.I[sample(nrow(vowel.I), nrow(vowel.I)), ]
vowel.e <- vowel.e[sample(nrow(vowel.e), nrow(vowel.e)), ]
vowel.i
vowel.i.train <- vowel.i[1:(nrow(vowel.i)/2),]
vowel.I.train <- vowel.I[1:(nrow(vowel.I)/2),]
vowel.e.train <- vowel.e[1:(nrow(vowel.e)/2),]
vowel.i.test <- vowel.i[nrow(vowel.i):(nrow(vowel.i)/2),]
vowel.I.test <- vowel.I[nrow(vowel.I):(nrow(vowel.I)/2),]
vowel.e.test <- vowel.e[nrow(vowel.e):(nrow(vowel.e)/2),]
sex.i <- as.character(vowel.i.test$sex)
sex.I <- as.character(vowel.I.test$sex)
sex.e <- as.character(vowel.e.test$sex)
sex.i.model <- glm(sex ~ f1+f2, data = vowel.i.test, family = binomial)
summary(sex.i.model)
plot(sex.i.model, which=1)
sex.I.model <- glm(sex ~ f1+f2, data = vowel.I.test, family = binomial)
summary(sex.I.model)
sex.e.model1 <- glm(sex ~ f1+f2, data = vowel.e.test, family = binomial)
summary(sex.e.model)
vowel.e.test <- vowel.e[nrow(vowel.e):(nrow(vowel.e)/2),]
sex.e.model1 <- glm(sex ~ f1+f2, data = vowel.e.test, family = binomial)
summary(sex.e.model)
summary(sex.e.model)
sex.e.model <- glm(sex ~ f1+f2, data = vowel.e.test, family = binomial)
summary(sex.e.model)
sex.i.model <- glm(sex ~ f1+f2, data = vowel.i.train, family = binomial)
summary(sex.i.model)
plot(sex.i.model, which=1)
sex.I.model <- glm(sex ~ f1+f2, data = vowel.I.train, family = binomial)
summary(sex.I.model)
plot(sex.I.model, which=1)
sex.e.model <- glm(sex ~ f1+f2, data = vowel.e.train, family = binomial)
summary(sex.e.model)
mod.pred.sex.i <- predict(sex.i.model, vowel.i.test, type = "response")
pred.sex.i <- rep("f", nrow(vowel.i.test))
pred.sex.i[mod.pred.sex.i >= 0.5] <- "m"
mod.pred.sex.I <- predict(sex.I.model, vowel.I.test, type = "response")
pred.sex.I <- rep("f", nrow(vowel.I.test))
pred.sex.I[mod.pred.sex.I >= 0.5] <- "m"
mod.pred.sex.e <- predict(sex.e.model, vowel.e.test, type = "response")
pred.sex.e <- rep("f", nrow(vowel.e.test))
pred.sex.e[mod.pred.sex.e >= 0.5] <- "m"
pred.sex.i <- pred.sex.i[1:length(sex.i)] #
table(pred.sex.i[1:length(sex.i)], sex.i)
mean(pred.sex.i[1:length(sex.i)] != sex.i)
pred.sex.I <- pred.sex.e[1:length(sex.I)]
table(pred.sex.I[1:length(sex.I)], sex.I)
mean(pred.sex.I[1:length(sex.I)] != sex.I)
pred.sex.e <- pred.sex.e[1:length(sex.e)]
table(pred.sex.e[1:length(sex.e)], sex.e)
mean(pred.sex.e[1:length(sex.e)] != sex.e)
pred.sex.I <- pred.sex.e[1:length(sex.I)]
table(pred.sex.I[1:length(sex.I)], sex.I)
mean(pred.sex.I[1:length(sex.I)] != sex.I)
pred.sex.i <- pred.sex.i[1:length(sex.i)] #
table(pred.sex.i[1:length(sex.i)], sex.i)
mean(pred.sex.i[1:length(sex.i)] != sex.i)
set.seed(26052016)
x <- rnorm(100, 100, 15)
y <- rnorm(100, 90, 10)
z <- rnorm(100, 110, 20)
plot(x)
df <- data.frame(x, y, z)
library(ggplot2)
ggplot(df, aes(x = x))+
geom_line()
ggplot(df, aes(x))+
geom_line()
ggplot(df, aes(y =x, x = 1:100))+
geom_line()
ggplot(df, aes(y =c(x,y,z), x = 1:100))+
geom_line()
ggplot(df, aes(y =x, x = 1:100))+
geom_line()
ggplot()+
geom_line(df, aes(y =x, x = 1:100))+
geom_line(df, aes(y =y, x = 1:100))+
geom_line(df, aes(y =z, x = 1:100))
ggplot(df)+
geom_line(df, aes(y =x, x = 1:100))+
geom_line(df, aes(y =y, x = 1:100))+
geom_line(df, aes(y =z, x = 1:100))
ggplot(df, aes(y =x, x = 1:100))+
geom_line(df, aes(y =x, x = 1:100))+
geom_line(df, aes(y =y, x = 1:100))+
geom_line(df, aes(y =z, x = 1:100))
ggplot(df, aes(y =x, x = 1:100))+
geom_line(df, aes(y =y, x = 1:100))
ggplot(df, aes(y =x, x = 1:100))
ggplot(df, aes(y =x, x = 1:100))+
geom_line()
ggplot(df, aes(y =x, x = 1:100))+
geom_line()+
geom_line(df, aes(y =y, x = 1:100))
library(reshape)
number <- 1:100
df <- data.frame(x, y, z, number)
df <- melt(df, id = "number")
View(df)
ggplot(df, aes(x = number, y = value, color = variable))+
geom_line()
ggplot(df, aes(x = number, y = value, color = variable))+
geom_line()+
theme_bw()
set.seed(26052016)
x <- rnorm(100, 100, 15)
y <- rnorm(100, 90, 10)
z <- rnorm(100, 160, 20)
number <- 1:100
df <- data.frame(x, y, z, number)
library(reshape)
library(ggplot2)
df <- melt(df, id = "number")
ggplot(df, aes(x = number, y = value, color = variable))+
geom_line()+
theme_bw()
df <- data.frame(log(x), log(y), log(z), number)
library(reshape)
library(ggplot2)
df <- melt(df, id = "number")
ggplot(df, aes(x = number, y = value, color = variable))+
geom_line()+
theme_bw()
df$value <- log(df$value)
ggplot(df, aes(x = number, y = value, color = variable))+
geom_line()+
theme_bw()
df$value <- log(df$value)
ggplot(df, aes(x = number, y = value, color = variable))+
geom_line()+
theme_bw()
df <- data.frame(scale(x), scale(y), scale(z), number)
library(reshape)
library(ggplot2)
df <- melt(df, id = "number")
ggplot(df, aes(x = number, y = value, color = variable))+
geom_line()+
theme_bw()
set.seed(26052016)
x <- rnorm(100, 100, 15)
y <- rnorm(100, 90, 10)
z <- rnorm(100, 160, 20)
number <- 1:100
df <- data.frame(scale(x), scale(y), scale(z), number)
library(reshape)
library(ggplot2)
df <- melt(df, id = "number")
ggplot(df, aes(x = number, y = value, color = variable))+
geom_line()+
theme_bw()
set.seed(26052016)
x <- rnorm(100, 100, 15)
y <- rnorm(100, 90, 10)
z <- rnorm(100, 160, 20)
number <- 1:100
df <- data.frame(x, y, z, number)
library(reshape)
library(ggplot2)
df <- melt(df, id = "number")
ggplot(df, aes(x = number, y = value, color = variable))+
geom_line()+
theme_bw()
dfs <- data.frame(scale(x), scale(y), scale(z), number)
library(reshape)
library(ggplot2)
dfs <- melt(dfs, id = "number")
ggplot(dfs, aes(x = number, y = value, color = variable))+
geom_line()+
theme_bw()
library(LearnBayes)
install.packages("pscl")
library(pscl)
n <- read.csv("http://goo.gl/YPMyl2", sep = ";")
n <- n[n$dictor == "ssb",]
n.cl <- kmeans(n[, c(5,6)], centers = 3)                   # датафрейм, k
n.cl
chisq.test(c(40, 122))
x <- 1:1000
y <- 1:1000
chisq.test(c(60, 65))
a <- chisq.test(c(60, 65))
for (i in x) {
chisq.test(c(i, 65))$p.value < 0.05
}
i <- 40
chisq.test(c(i, 65))$p.value < 0.05
df <- data.frame()
x <- 1:1000
y <- 1:1000
df <- data.frame()
for (j in y) {
for (i in x) {
df[i, j] <- chisq.test(c(i, j))$p.value < 0.05
}}
x <- 1:10
y <- 1:10
df <- data.frame()
for (j in y) {
for (i in x) {
df[i, j] <- chisq.test(c(i, j))$p.value < 0.05
}}
x <- 1:10
y <- 1:10
df <- data.frame()
for (j in y) {
for (i in x) {
df[i, j] <- chisq.test(c(i, j))$p.value < 0.05
}}
View(df)
plot(df)
dist(df)
heatmap(df)
as.matrix(df)
dm <- as.matrix(dist(df, method = "binary"))           # считает расстояния
library(reshape)
dm.m <- melt(dm)                   # преобразования матрицы для ggplot
library(ggplot2)
ggplot(dm.m, aes(X1, X2, fill=value)) +
geom_tile()+                                       # делает heatmap
geom_text(aes(X1, X2, label = round(value, 2)), # пишет значения
color = "white", size = 4)
x <- 1:10
y <- 1:10
df <- data.frame()
for (j in y) {
for (i in x) {
df[i, j] <- chisq.test(c(i, j))$p.value < 0.05
}}
dm <- as.matrix(df)           # считает расстояния
dm.m <- melt(dm)                   # преобразования матрицы для ggplot
ggplot(dm.m, aes(X1, X2, fill=value)) +
geom_tile()+                                       # делает heatmap
geom_text(aes(X1, X2, label = round(value, 2)), # пишет значения
color = "white", size = 4)
colnames(df) <- 1:10
dm <- as.matrix(df)           # считает расстояния
library(reshape)
dm.m <- melt(dm)                   # преобразования матрицы для ggplot
library(ggplot2)
ggplot(dm.m, aes(X1, X2, fill=value)) +
geom_tile()+                                       # делает heatmap
geom_text(aes(X1, X2, label = round(value, 2)), # пишет значения
color = "white", size = 4)
x <- 1:100
y <- 1:100
df <- data.frame()
for (j in y) {
for (i in x) {
df[i, j] <- chisq.test(c(i, j))$p.value < 0.05
}}
colnames(df) <- 1:10
dm <- as.matrix(df)           # считает расстояния
library(reshape)
dm.m <- melt(dm)                   # преобразования матрицы для ggplot
library(ggplot2)
ggplot(dm.m, aes(X1, X2, fill=value)) +
geom_tile()+                                       # делает heatmap
geom_text(aes(X1, X2, label = round(value, 2)), # пишет значения
color = "white", size = 4)
x <- 1:100
y <- 1:100
df <- data.frame()
for (j in y) {
for (i in x) {
df[i, j] <- chisq.test(c(i, j))$p.value < 0.05
}}
colnames(df) <- 1:100
dm <- as.matrix(df)           # считает расстояния
library(reshape)
dm.m <- melt(dm)                   # преобразования матрицы для ggplot
library(ggplot2)
ggplot(dm.m, aes(X1, X2, fill=value)) +
geom_tile()+                                       # делает heatmap
geom_text(aes(X1, X2, label = round(value, 2)), # пишет значения
color = "white", size = 4)
x <- 1:1000
y <- 1:1000
df <- data.frame()
for (j in y) {
for (i in x) {
df[i, j] <- chisq.test(c(i, j))$p.value < 0.05
}}
ggplot(dm.m, aes(X1, X2, fill=value)) +
geom_tile()+                                       # делает heatmap
geom_text(aes(X1, X2, label = round(value, 2)), # пишет значения
color = "white", size = 4)+
ggtitle("χ2 < 0.05")
ggplot(dm.m, aes(X1, X2, fill=value)) +
geom_tile()+                                       # делает heatmap
geom_text(aes(X1, X2, label = round(value, 2)), # пишет значения
color = "white", size = 4)+
ggtitle("χ2 < 0.05")+
theme_bw()
ggplot(dm.m, aes(X1, X2, fill=value)) +
geom_tile()+                                       # делает heatmap
ggtitle("χ2 < 0.05")+
theme_bw()
ggplot(dm.m, aes(X1, X2, fill=value)) +
geom_tile()+                                       # делает heatmap
geom_text(aes(X1, X2, label = round(value, 2)), # пишет значения
color = "white", size = 4)+
ggtitle("χ2 < 0.05")+
theme_bw()
chisq.test(c(386, 414))
chisq.test(c(1388, 1502))
chisq.test(c(668, 513))
a <- chisq.test(c(668, 513))
a$expected
a$observed
plot(1:100, 1:100)
plot(1:100, sin(1:100))
plot(1:100, log(1:100))
library(leaflet)
pal <- colorFactor(c("#B22222", # 5
"#FFD700", # 10
"#2E8B57", # 20
"#6495ED", # 100
"#BA55D3" # 100+
), domain = america$limit)
m <- leaflet(america) %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addCircleMarkers(lng=america$lng, # широта
lat=america$lat, # долгота
popup=glotto(america$language.glotcode, america$lang), # высвечивается при нажатии
stroke = T, # нужна ли обводка для кружочков
radius = 5, # радиус маркера
fillOpacity = 1, # прозрачность
color = pal(america$limit),
group = america$limit) %>%
addLegend(position = c("bottomleft"),
pal = pal,# раскраска
values = america$limit,
opacity = 1) %>%
addLayersControl(overlayGroups = america$limit,
options = layersControlOptions(collapsed = F))
m
setwd("/home/agricolamz/_DATA/OneDrive1/_Work/Atlas.of.Caucasian.Languages/Numearals.Amerika.atlas")
america <- read.csv("MapLang.csv")
colnames(america)[14] <- ("fnam")
colnames(america)[5] <- ("limit")
colnames(america)[6] <- ("adding")
colnames(america)[9] <- ("base")
library(leaflet)
pal <- colorFactor(c("#B22222", # 5
"#FFD700", # 10
"#2E8B57", # 20
"#6495ED", # 100
"#BA55D3" # 100+
), domain = america$limit)
m <- leaflet(america) %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addCircleMarkers(lng=america$lng, # широта
lat=america$lat, # долгота
popup=glotto(america$language.glotcode, america$lang), # высвечивается при нажатии
stroke = T, # нужна ли обводка для кружочков
radius = 5, # радиус маркера
fillOpacity = 1, # прозрачность
color = pal(america$limit),
group = america$limit) %>%
addLegend(position = c("bottomleft"),
pal = pal,# раскраска
values = america$limit,
opacity = 1) %>%
addLayersControl(overlayGroups = america$limit,
options = layersControlOptions(collapsed = F))
m
glotto <- function(glottocode, name){
paste("<a href='",
"http://glottolog.org/resource/languoid/id/",
glottocode,
"' target='_blank'>",
name,
"</a>", sep = "")}
library(leaflet)
pal <- colorFactor(c("#B22222", # 5
"#FFD700", # 10
"#2E8B57", # 20
"#6495ED", # 100
"#BA55D3" # 100+
), domain = america$limit)
m <- leaflet(america) %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addCircleMarkers(lng=america$lng, # широта
lat=america$lat, # долгота
popup=glotto(america$language.glotcode, america$lang), # высвечивается при нажатии
stroke = T, # нужна ли обводка для кружочков
radius = 5, # радиус маркера
fillOpacity = 1, # прозрачность
color = pal(america$limit),
group = america$limit) %>%
addLegend(position = c("bottomleft"),
pal = pal,# раскраска
values = america$limit,
opacity = 1) %>%
addLayersControl(overlayGroups = america$limit,
options = layersControlOptions(collapsed = F))
m
glotto <- function(glottocode, name){
paste("<a href='",
"http://glottolog.org/resource/languoid/id/",
glottocode,
"' target='_blank'>",
name,
"</a>", sep = "")}
setwd("/home/agricolamz/_DATA/OneDrive1/_Work/Atlas.of.Caucasian.Languages/Numearals.Amerika.atlas")
america <- read.csv("MapLang.csv")
colnames(america)[14] <- ("fnam")
colnames(america)[5] <- ("limit")
colnames(america)[6] <- ("adding")
colnames(america)[9] <- ("base")
america$limit
